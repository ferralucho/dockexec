# This test probably only works on Unix-y systems. That's fine for now.
[!exec:go] skip
[!exec:docker] skip
[!symlink] skip

# TODO: do we get a speed-up if we reuse the host's $HOME, e.g. for Go's or
# Docker's caches?
env HOME=$WORK/home

# We want to use the current dockexec, not whichever happens to be globally
# installed. Use the test binary with TESTSCRIPT_COMMAND, which we know will
# correctly run dockexec thanks to go-internal/testscript.
mkdir .bin
symlink .bin/dockexec -> $TESTBIN
env PATH=.bin:$PATH
env TESTSCRIPT_COMMAND=dockexec

# First, check that we succeed without -exec.
exec go test
! stdout 'TestWithBusybox'
stdout 'PASS'

# Then, check that we fail with an invalid image.
! exec go test -exec='dockexec :bad:syntax:'
stdout 'docker:'

# Then, check that we succeed with just a simple image, and that the test
# requiring busybox isn't skipped. This also ensures that test flags are passed
# along.
exec go test -exec='dockexec busybox:1.31.1-musl' -v
! stdout 'SKIP'
stdout 'TestWithBusybox'
stdout 'PASS'

-- go.mod --
module foo.com/bar

-- f.go --
package bar

func True() bool { return true }

-- f_test.go --
package bar

import (
	"os/exec"
	"testing"
)

func TestTrue(t *testing.T) {
	if True() != true {
		t.FailNow()
	}
}

func TestWithBusybox(t *testing.T) {
	if _, err := exec.LookPath("busybox"); err != nil {
		t.Skip("busybox not installed")
	}
}
